package ru.surfstudio.emojifilter.filters

import android.text.InputFilter
import java.util.*

/**
 * Support Emoji 13.1 2020-09-12
 * @see https://unicode.org/Public/emoji/13.1/emoji-test.txt
 */
object EmojiUnicodeGroupFilter {

    private const val VARIATION_SELECTOR = "FE0F"
    private const val EMOJI_PARTS_GLUE = "200D"

    private val glueSymbols = arrayOf(
        VARIATION_SELECTOR,
        EMOJI_PARTS_GLUE
    )

    private val emojiUnicodeBlocks = arrayOf(
        Character.UnicodeBlock.EMOTICONS,
        Character.UnicodeBlock.MAHJONG_TILES,
        Character.UnicodeBlock.DOMINO_TILES,
        Character.UnicodeBlock.PLAYING_CARDS,
        Character.UnicodeBlock.ENCLOSED_ALPHANUMERICS,
        Character.UnicodeBlock.ENCLOSED_ALPHANUMERIC_SUPPLEMENT,
        Character.UnicodeBlock.ENCLOSED_IDEOGRAPHIC_SUPPLEMENT,
        Character.UnicodeBlock.ENCLOSED_CJK_LETTERS_AND_MONTHS,
        Character.UnicodeBlock.MISCELLANEOUS_SYMBOLS,
        Character.UnicodeBlock.MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS,
        Character.UnicodeBlock.MISCELLANEOUS_SYMBOLS_AND_ARROWS,
        Character.UnicodeBlock.MISCELLANEOUS_TECHNICAL,
        Character.UnicodeBlock.DINGBATS,
        Character.UnicodeBlock.TRANSPORT_AND_MAP_SYMBOLS,
        Character.UnicodeBlock.GEOMETRIC_SHAPES,
        Character.UnicodeBlock.ALCHEMICAL_SYMBOLS,
        Character.UnicodeBlock.ARROWS,
        Character.UnicodeBlock.SUPPLEMENTAL_ARROWS_A,
        Character.UnicodeBlock.SUPPLEMENTAL_ARROWS_B,
        Character.UnicodeBlock.COMBINING_MARKS_FOR_SYMBOLS,
        Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION,
        Character.UnicodeBlock.LETTERLIKE_SYMBOLS,
        Character.UnicodeBlock.TAGS
    )

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤ —Å—Ç–æ—Ä–æ–∫–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 1 emoji
     */
    fun containsEmoji(str: String): Boolean {
        // unicode can be at most 2 Java Char(utf-16), use code point
        val cpCnt = str.codePointCount(0, str.length)
        for (index in 0 until cpCnt) {
            // i is index by code point
            val i = str.offsetByCodePoints(0, index)
            val codepoint = str.codePointAt(i)
            if (codepoint.isEmoji() || isPartOfComplexEmoji(index, str)) {
                return true
            }
        }
        return false
    }

    /**
     * –í—ã—Ä–µ–∑–∞–µ—Ç emoji –∏–∑ —Å—Ç—Ä–æ–∫–∏
     */
    fun removeEmoji(str: String): String {
        val sb = StringBuilder()
        // unicode can be at most 2 Java Char(utf-16), use code point
        val codePointsCount = str.codePointCount(0, str.length)
        for (codePointIndex in 0 until codePointsCount) {
            val indexInString = str.offsetByCodePoints(0, codePointIndex)
            val codePoint = str.codePointAt(indexInString)
            if (!codePoint.isEmoji() &&
                !codePoint.isGlueSymbol() &&
                !isPartOfComplexEmoji(codePointIndex, str)
            ) {
                sb.append(Character.toChars(codePoint))
            }
        }
        return sb.toString()
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å codePoint, —Å–ª–µ–¥—É—é—â–∏–π –∑–∞ codePoint —Å –∏–Ω–¥–µ–∫—Å–æ–º = [index], –≤ —Å—Ç—Ä–æ–∫–µ [str]
     */
    private fun getNextCodePoint(index: Int, str: String): Int? {
        val codePointsCount = str.codePointCount(0, str.length)
        val nextCodePointIndex = index + 1
        return if (nextCodePointIndex <= codePointsCount - 1) {
            val indexInString = str.offsetByCodePoints(0, nextCodePointIndex)
            str.codePointAt(indexInString)
        } else {
            null
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ codePoint –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã codePoint-–æ–≤,
     * –≤–º–µ—Å—Ç–µ –æ–±—Ä–∞–∑—É—é—â–∏—Ö —ç–º–æ–¥–∂–∏
     */
    private fun isPartOfComplexEmoji(index: Int, str: String): Boolean {
        val nextCodePoint = getNextCodePoint(index, str)
        return nextCodePoint?.isGlueSymbol() ?: false
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ codePoint —Å–≤—è–∑—É—é—â–∏–º —Å–∏–º–≤–æ–ª–æ–º –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã —Å–∏–º–≤–æ–ª–æ–≤
     */
    private fun Int.isGlueSymbol(): Boolean {
        val nextInHex = toHexStr(this)
        return nextInHex in glueSymbols
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ codePoint –∫ –≥—Ä—É–ø–ø–µ —Å–∏–º–≤–æ–ª–æ–≤, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ–π –¥–ª—è emoji
     */
    private fun Int.isEmoji(): Boolean {
        val unicodeBlock = Character.UnicodeBlock.of(this)
        return unicodeBlock == null || unicodeBlock in emojiUnicodeBlocks
    }

    /**
     * –ü–µ—Ä–µ–≤–æ–¥ codePoint –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
     *
     * –ü—Ä–∏–º–µ—Ä (–¥–ª—è ü§æ): 129342 -> 1F93E
     */
    private fun toHexStr(c: Int): String {
        return Integer.toHexString(c).toUpperCase(Locale.ROOT)
    }
}
